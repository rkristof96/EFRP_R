n_curves <- 30
data_range <- range(c(x$x, x$y))
rand_i <- sample(nrow(samples_mat), n_curves)
hist_with_t_curves(x$x, stats["mu_x", "mean"], stats["sigma_x", "median"], mu_x[rand_i], sigma_x[rand_i],
nu[rand_i], x$x_name, main= paste("Data",  x$x_name, "w. Post. Pred."), x_range= data_range)
hist_with_t_curves(x$y, stats["mu_y", "mean"], stats["sigma_y", "median"], mu_y[rand_i], sigma_y[rand_i],
nu[rand_i], x$y_name, main= paste("Data",  x$y_name, "w. Post. Pred."), x_range= data_range)
# Plot posterior distribution of parameter nu:
#   plotPost( log10(nu) , col="skyblue" , cred_mass= x$cred_mass,
#             xlab=bquote("log10("*nu*")") , cex.lab = 1.75 , show_mode=TRUE ,
#             main="Normality" ) #  (<0.7 suggests kurtosis)
# Plot posterior distribution of parameters mu_x, mu_y, and their difference:
xlim = range( c( mu_x , mu_y ) )
plotPost( mu_x ,  xlim=xlim , cex.lab = 1.75 , cred_mass= x$cred_mass, show_median=TRUE,
xlab=bquote(mu[x]) , main=paste(x$x_name,"Mean") , col="skyblue" )
plotPost( mu_y ,  xlim=xlim , cex.lab = 1.75 ,  cred_mass= x$cred_mass, show_median=TRUE,
xlab=bquote(mu[y]) , main=paste(x$y_name,"Mean") , col="skyblue" )
plotPost( samples_mat[,"mu_diff"] , comp_val= x$comp , cred_mass= x$cred_mass,
xlab=bquote(mu[x] - mu[y]) , cex.lab = 1.75 , show_median=TRUE,
main="Difference of Means" , col="skyblue" )
# Save this to var.test
#
# Plot posterior distribution of param's sigma_x, sigma_y, and their difference:
#   xlim=range( c( sigma_x , sigma_y ) )
#   plotPost( sigma_x ,  xlim=xlim , cex.lab = 1.75 ,cred_mass= x$cred_mass,
#             xlab=bquote(sigma[x]) , main=paste(x$x_name, "Std. Dev.") ,
#             col="skyblue" , show_mode=TRUE )
#   plotPost( sigma_y ,  xlim=xlim , cex.lab = 1.75 ,cred_mass= x$cred_mass,
#             xlab=bquote(sigma[y]) , main=paste(x$y_name, "Std. Dev.") ,
#             col="skyblue" , show_mode=TRUE )
#   plotPost( samples_mat[, "sigma_diff"] , comp_val= x$comp , cred_mass= x$cred_mass,
#             xlab=bquote(sigma[x] - sigma[y]) , cex.lab = 1.75 ,
#             main="Difference of Std. Dev.s" , col="skyblue" , show_mode=TRUE )
# Plot of estimated effect size. Effect size is d-sub-a from
# Macmillan & Creelman, 1991; Simpson & Fitter, 1973; Swets, 1986a, 1986b.
plotPost( samples_mat[, "eff_size"] , comp_val=0 , cred_mass= x$cred_mass,
xlab=bquote( (mu[x]-mu[y]) / sqrt((sigma[x]^2 +sigma[y]^2 )/2 ) ),
show_median=TRUE , cex.lab=1.0 , main="Effect Size" , col="skyblue" )
par(old_par)
}
#' @export
diagnostics.bayes_two_sample_t_test <- function(fit) {
print_mcmc_info(fit$mcmc_samples)
cat("\n")
print_diagnostics_measures(round(fit$stats, 3))
cat("\n")
print_bayes_two_sample_t_test_params(fit)
cat("\n")
old_par <- par( mar=c(3.5,2.5,2.5,0.5) , mgp=c(2.25,0.7,0) )
plot(fit$mcmc_samples)
par(old_par)
invisible(NULL)
}
#' @export
model.code.bayes_two_sample_t_test <- function(fit) {
cat("## Model code for Bayesian estimation supersedes the t test - two sample ##\n")
cat("require(rjags)\n\n")
cat("# Setting up the data\n")
cat("x <-", fit$x_data_expr, "\n")
cat("y <-", fit$y_data_expr, "\n")
cat("\n")
pretty_print_function_body(two_sample_t_test_model_code)
invisible(NULL)
}
# Not to be run, just to be printed
two_sample_t_test_model_code <- function(x, y) {
# The model string written in the JAGS language
BayesianFirstAid::replace_this_with_model_string
# Setting parameters for the priors that in practice will result
# in flat priors on the mu's and sigma's.
mean_mu = mean( c(x, y), trim=0.2)
precision_mu = 1 / (mad( c(x, y) )^2 * 1000000)
sigma_low = mad( c(x, y) ) / 1000
sigma_high = mad( c(x, y) ) * 1000
# Initializing parameters to sensible starting values helps the convergence
# of the MCMC sampling. Here using robust estimates of the mean (trimmed)
# and standard deviation (MAD).
inits_list <- list(
mu_x = mean(x, trim=0.2), mu_y = mean(y, trim=0.2),
sigma_x = mad(x), sigma_y = mad(y),
nuMinusOne = 4)
data_list <- list(
x = x, y = y,
mean_mu = mean_mu,
precision_mu = precision_mu,
sigma_low = sigma_low,
sigma_high = sigma_high)
# The parameters to monitor.
params <- c("mu_x", "mu_y", "mu_diff", "sigma_x", "sigma_y", "sigma_diff",
"nu", "eff_size", "x_pred", "y_pred")
# Running the model
model <- jags.model(textConnection(model_string), data = data_list,
inits = inits_list, n.chains = 3, n.adapt=1000)
update(model, 500) # Burning some samples to the MCMC gods....
samples <- coda.samples(model, params, n.iter=10000)
# Inspecting the posterior
plot(samples)
summary(samples)
}
two_sample_t_test_model_code <- inject_model_string(two_sample_t_test_model_code, two_sample_t_model_string)
########################################
### Paired samples t-test S3 methods ###
########################################
#' @export
print.bayes_paired_t_test <- function(x, ...) {
s <- format_stats(x$stats)
cat("\n")
cat("\tBayesian estimation supersedes the t test (BEST) - paired samples\n")
cat("\n")
cat("data: ", x$data_name,  ", n = ", length(x$pair_diff),"\n", sep="")
cat("\n")
cat("  Estimates [", s[1, "HDI%"] ,"% credible interval]\n", sep="")
cat("mean paired difference: ", s["mu_diff", "median"], " [", s["mu_diff", "HDIlo"], ", ", s["mu_diff", "HDIup"] , "]\n",sep="")
cat("sd of the paired differences: ", s["sigma_diff", "median"], " [", s["sigma_diff", "HDIlo"], ", ", s["sigma_diff", "HDIup"] , "]\n",sep="")
cat("\n")
cat("The mean difference is more than", s["mu_diff","comp"] , "by a probability of", s["mu_diff","%>comp"], "\n")
cat("and less than", s["mu_diff", "comp"] , "by a probability of", s["mu_diff", "%<comp"], "\n")
cat("\n")
invisible(NULL)
}
print_bayes_paired_t_test_params <- function(x) {
cat("  Model parameters and generated quantities\n")
cat("mu_diff: the mean pairwise difference between", x$x_name, "and", x$y_name, "\n")
cat("sigma_diff: the scale of the pairwise difference, a consistent\n  estimate of SD when nu is large.\n")
cat("nu: the degrees-of-freedom for the t distribution fitted to the pairwise difference\n")
cat("eff_size: the effect size calculated as (mu_diff - ", x$comp ,") / sigma_diff\n", sep="")
cat("diff_pred: predicted distribution for a new datapoint generated\n  as the pairwise difference between", x$x_name, "and", x$y_name,"\n")
}
#' @export
summary.bayes_paired_t_test <- function(object, ...) {
s <- round(object$stats, 3)
cat("  Data\n")
cat(object$x_name, ", n = ", length(object$x), "\n", sep="")
cat(object$y_name, ", n = ", length(object$y), "\n", sep="")
cat("\n")
print_bayes_paired_t_test_params(object)
cat("\n")
cat("  Measures\n" )
print(s[, c("mean", "sd", "HDIlo", "HDIup", "%<comp", "%>comp")])
cat("\n")
cat("'HDIlo' and 'HDIup' are the limits of a ", s[1, "HDI%"] ,"% HDI credible interval.\n", sep="")
cat("'%<comp' and '%>comp' are the probabilities of the respective parameter being\n")
cat("smaller or larger than ", s[1, "comp"] ,".\n", sep="")
cat("\n")
cat("  Quantiles\n" )
print(s[, c("q2.5%", "q25%", "median","q75%", "q97.5%")] )
invisible(object$stats)
}
#' @method plot bayes_paired_t_test
#' @export
plot.bayes_paired_t_test <- function(x, y, ...) {
stats <- x$stats
mcmc_samples <- x$mcmc_samples
samples_mat <- as.matrix(mcmc_samples)
mu_diff = samples_mat[,"mu_diff"]
sigma_diff = samples_mat[,"sigma_diff"]
nu = samples_mat[,"nu"]
old_par <- par(no.readonly = TRUE)
#layout( matrix( c(3,3,4,4,5,5, 1,1,1,1,2,2) , nrow=6, ncol=2 , byrow=FALSE ) )
layout( matrix( c(2,2,3,3,4,4, 1,1) , nrow=4, ncol=2 , byrow=FALSE ) )
par( mar=c(3.5,3.5,2.5,0.5) , mgp=c(2.25,0.7,0) )
n_curves <- 30
rand_i <- sample(nrow(samples_mat), n_curves)
hist_with_t_curves(x$pair_diff, stats["mu_diff", "mean"], stats["sigma_diff", "median"], mu_diff[rand_i], sigma_diff[rand_i],
nu[rand_i], x$data_name, main= "Data w. Post. Pred.", x_range= range(x$pair_diff))
# Plot posterior distribution of parameter nu:
#paramInfo = plotPost( log10(nu) , col="skyblue" ,
#                      xlab=bquote("log10("*nu*")") , cex.lab = 1.75 , show_mode=TRUE ,
#                      main="Normality" ) #  (<0.7 suggests kurtosis)
# distribution of mu_diff:
xlim = range( c( mu_diff , x$comp ) )
plotPost(mu_diff ,  xlim=xlim , cex.lab = 1.75 , comp_val = x$comp, cred_mass= x$cred_mass,
xlab=bquote(mu[diff]) , main=paste("Mean difference") , col="skyblue", show_median=TRUE )
# distribution of sigma_diff:
plotPost(sigma_diff, cex.lab = 1.75, xlab=bquote(sigma[diff]), main=paste("Std. Dev. of difference"),
cred_mass= x$cred_mass, col="skyblue" , show_median=TRUE )
# effect size:
plotPost(samples_mat[, "eff_size"] , comp_val=0 , xlab=bquote( (mu[diff] -.(x$comp)) / sigma[diff] ),
cred_mass= x$cred_mass, show_median=TRUE , cex.lab=1.75 , main="Effect Size" , col="skyblue" )
par(old_par)
invisible(NULL)
}
#' @export
diagnostics.bayes_paired_t_test <- function(fit) {
print_mcmc_info(fit$mcmc_samples)
cat("\n")
print_diagnostics_measures(round(fit$stats, 3))
cat("\n")
print_bayes_paired_t_test_params(fit)
cat("\n")
old_par <- par( mar=c(3.5,2.5,2.5,0.5) , mgp=c(2.25,0.7,0) )
plot(fit$mcmc_samples)
par(old_par)
invisible(NULL)
}
#' @export
model.code.bayes_paired_t_test <- function(fit) {
cat("## Model code for Bayesian estimation supersedes the t test - paired samples ##\n")
cat("require(rjags)\n\n")
cat("# Setting up the data\n")
cat("x <-", fit$x_data_expr, "\n")
cat("y <-", fit$y_data_expr, "\n")
cat("pair_diff <- x - y\n")
cat("comp_mu <- ", fit$comp, "\n")
cat("\n")
pretty_print_function_body(paired_samples_t_test_model_code)
invisible(NULL)
}
# Not to be run, just to be printed
paired_samples_t_test_model_code <- function(pair_diff, comp_mu) {
# The model string written in the JAGS language
BayesianFirstAid::replace_this_with_model_string
# Setting parameters for the priors that in practice will result
# in flat priors on mu and sigma.
mean_mu = mean(pair_diff, trim=0.2)
precision_mu = 1 / (mad(pair_diff)^2 * 1000000)
sigma_low = mad(pair_diff) / 1000
sigma_high = mad(pair_diff) * 1000
# Initializing parameters to sensible starting values helps the convergence
# of the MCMC sampling. Here using robust estimates of the mean (trimmed)
# and standard deviation (MAD).
inits_list <- list(
mu_diff = mean(pair_diff, trim=0.2),
sigma_diff = mad(pair_diff),
nuMinusOne = 4)
data_list <- list(
pair_diff = pair_diff,
comp_mu = comp_mu,
mean_mu = mean_mu,
precision_mu = precision_mu,
sigma_low = sigma_low,
sigma_high = sigma_high)
# The parameters to monitor.
params <- c("mu_diff", "sigma_diff", "nu", "eff_size", "diff_pred")
# Running the model
model <- jags.model(textConnection(model_string), data = data_list,
inits = inits_list, n.chains = 3, n.adapt=1000)
update(model, 500) # Burning some samples to the MCMC gods....
samples <- coda.samples(model, params, n.iter=10000)
# Inspecting the posterior
plot(samples)
summary(samples)
}
paired_samples_t_test_model_code <- inject_model_string(paired_samples_t_test_model_code, paired_samples_t_model_string)
install.packages("eurostat")
library(eurostat)
RawData <- get_eurostat("ts_inpr_m", filters=list(geo="HU", s_adj = "NSA", nace_r2="C", unit="I10"))
RawData
head(RawData)
RawData <- RawData[!is.na(RawData$values)]
plot(values ~ time, data = RawData)
RawData
RawData <- get_eurostat("ts_inpr_m", filters=list(geo="HU", s_adj = "NSA", nace_r2="C", unit="I10"))
RawData <- get_eurostat("sts_inpr_m", filters=list(geo="HU", s_adj = "NSA", nace_r2="C", unit="I10"))
head(RawData)
RawData <- RawData[!is.na(RawData$values)]
plot(values ~ time, data = RawData, type="l")
sepctrum(RawData$values)
spectrum(RawData$values)
spectrum(RawData$values)
head(RawData)
!is.na(RawData$values)
RawData <- RawData[!is.na(RawData$values),]
plot(values ~ time, data = RawData, type="l")
spectrum(RawData$values)
str(spectrum(RawData$values))
plot(spec ~freq, data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~freq, data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~ 1/freq, data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~ (1/freq), data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~ I(1/freq), data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~ freq, data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l")
plot(log(spec) ~ I(1/freq), data= with(spectrum(RawData$values), data.frame(spec,freq)), type="l", xlim=c(0,20))
dim(RawData)
RawData <-. RawData[1:215,] #páratlan idősor kell, egyet kidobunk
RawData <- RawData[1:215,] #páratlan idősor kell, egyet kidobunk
curve(cos(pi/2*x), xlim=c(0,9))
curve(cos(pi/2*x), xlim=c(0,9), xlab="t")
curve(cos(pi/2*x), xlim=c(0,9), xlab="t", ylab="")
curve(cos(2*pi/2*x), xlim=c(0,9), xlab="t", ylab="", add = T, col="blue")
curve(cos(3*pi/2*x), xlim=c(0,9), xlab="t", ylab="", add = T, col="blue")
curve(cos(pi/2*x), xlim=c(0,9), xlab="t", ylab="")
curve(cos(3*pi/2*x), xlim=c(0,9), xlab="t", ylab="", add = T, col="blue")
###
N <- nrow(RawData)
M <- (N-1)/2
omegas <- (1:M)*2*pi/N
predcos <- outer(0:(N-1),omegas,function(x,y)cos(x*y))
predcos
# design matrix
predsin <- outer(0:(N-1),omegas,function(x,y)sin(x*y))
pred <- data.frame(predcos,predsin)
colnames(pred) <-c(paste0("cos",1:M),paste0("sin",1:M))
head(pred)
pred$y <- RawData$values
SpecReg <- lm(y~., data = pred)
summary(SpecReg)
SpecReg$coef <-coef(SpecReg)
names(SpecReg$coef)[1] <- "mu"
SpecReg$coef <-NULL
SpecRegCoef <-coef(SpecReg)
names(SpecRegCoef)[1] <- "mu"
SpecRegCoef
mu
names(SpecRegCoef)[1] <- "mu"
SpecRegCoef
mu
SpecRegCoef["mu"]
mean(RawData$values)
cbind(t(2/N*RawData %*% predcos),SpecRegCoef[2:108])
cbind(t(2/N*(RawData %*% predcos)),SpecRegCoef[2:108])
cbind(t(2/N*(RawData$values %*% predcos)),SpecRegCoef[2:108])
var(RawData$values)*(N-1)/N
1/2*sum(SpecRegCoef[-"mu"]^2)
1/2*sum(SpecRegCoef[-1]^2)
SpecRegCoef[109:215]
#3.)
1/2*(SpecRegCoef[2:108]^2+SpecRegCoef[109:215]^2)*N/2
#3.)
plot(omegas,log(1/2*(SpecRegCoef[2:108]^2+SpecRegCoef[109:215]^2)*N/2), type="l")
#3.)
plot(omegas,log(1/2*(SpecRegCoef[2:108]^2+SpecRegCoef[109:215]^2)*N/2), type="l", ylab = "logspec")
library(readxl)
library(schoolmath)
library(lineup)
library(dplyr)
library(dygraphs)
library(schoolmath)
# setwd("C:/Users/banna/Documents/egyetem/EFRP/R/efrp_r_reizinger-master/efrp_r_reizinger-master")
setwd("C:/Users/Reizinger Kristóf/Desktop/HF/Final")
#0.) Loading functions
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlations.R")
source("select.param.R")
# data
#1.)Set wd
dataset <- c("C:/Users/Reizinger Kristóf/Desktop/HF/Final/WTI2.xlsx")
#2.) Input for reading data
number_of_products <- 3 # 24 # number of analysed products
assertthat::validate_that(is.numeric(number_of_products)==T)
last_col_name <- Excel_colnames_find()[number_of_products + 1] # first col is Date
last_row_number <- 2558 # number of rows
read_range <- paste0("A1:",last_col_name,last_row_number) # converts inputs for Excel format
#3.)
#a.) param() stores the data
# You should add your input parameters (windowsize and correlation lag) opening opening() function
#b.) korrel() calculate only 1 correlation
#c.)select.param() select one of the possible window size and correlation lag by adding the indexes
# you can rewrite the possibilities in param() function
#Window Size
#view the possibilities
param()[["WindowSize"]]
#choose the index
i1 <-1
#Correlation Lag
#view the possibilities
param()[["CorrelLag"]]
#choose the index
i2 <-1
#d.) all_correlations() output is an xts format table (rows=Date, cols=correlation pairs)
# head(all_correlations())
# 4.) Plot cross-correlations
#making an interactive plot by using "dygraphs" package
source("dyplot.R")
dyplot(all_correlations())
library(readxl)
library(schoolmath)
library(lineup)
library(dplyr)
library(dygraphs)
library(schoolmath)
# setwd("C:/Users/banna/Documents/egyetem/EFRP/R/efrp_r_reizinger-master/efrp_r_reizinger-master")
setwd("C:/Users/Reizinger Kristóf/Desktop/HF/Final")
#0.) Loading functions
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlations.R")
source("select.param.R")
# data
#1.)Set wd
dataset <- c("C:/Users/Reizinger Kristóf/Desktop/HF/Final/WTI2.xlsx")
#2.) Input for reading data
number_of_products <- 3 # 24 # number of analysed products
assertthat::validate_that(is.numeric(number_of_products)==T)
last_col_name <- Excel_colnames_find()[number_of_products + 1] # first col is Date
last_row_number <- 2558 # number of rows
read_range <- paste0("A1:",last_col_name,last_row_number) # converts inputs for Excel format
#3.)
#a.) param() stores the data
# You should add your input parameters (windowsize and correlation lag) opening opening() function
#b.) korrel() calculate only 1 correlation
#c.)select.param() select one of the possible window size and correlation lag by adding the indexes
# you can rewrite the possibilities in param() function
#Window Size
#view the possibilities
param()[["WindowSize"]]
#choose the index
i1 <-1
#Correlation Lag
#view the possibilities
param()[["CorrelLag"]]
#choose the index
i2 <-1
#making an interactive plot by using "dygraphs" package
source("dyplot.R")
dyplot(all_correlations())
all_correlations()
#Inputs for korrel() function
# store parameters from param() function
# this step reduces calculation time
p_Pairs <- param()[["Pairs"]] # name of possible pairs
p_Date <- param()[["Date"]] # dates from param()
window_size <- select.param()["windowsize"] # windowsize from param()
correl_lag <- select.param()["correllag"] # correlation lag from param()
data_set <-param() # read dataset into data_set variable
solution <-apply(p_Pairs,1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2],
timeseries=data_set, windowsize=window_size,
correllag=correl_lag, pDate=p_Date)
)
return(solution)
}
)
colnames(solution) <- paste0(p_Pairs[,1],"-",p_Pairs[,2]) # naming correlation matrix
sdate <- (param()[["Date"]])
sdate <-as.Date(as.vector(as.matrix(sdate)))[(windowsize+correllag + 1):dim(sdate)[1]]
library(readxl)
library(schoolmath)
library(lineup)
library(dplyr)
library(dygraphs)
library(schoolmath)
# setwd("C:/Users/banna/Documents/egyetem/EFRP/R/efrp_r_reizinger-master/efrp_r_reizinger-master")
setwd("C:/Users/Reizinger Kristóf/Desktop/HF/Final")
#0.) Loading functions
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlations.R")
source("select.param.R")
# data
#1.)Set wd
dataset <- c("C:/Users/Reizinger Kristóf/Desktop/HF/Final/WTI2.xlsx")
#2.) Input for reading data
number_of_products <- 3 # 24 # number of analysed products
assertthat::validate_that(is.numeric(number_of_products)==T)
last_col_name <- Excel_colnames_find()[number_of_products + 1] # first col is Date
last_row_number <- 2558 # number of rows
read_range <- paste0("A1:",last_col_name,last_row_number) # converts inputs for Excel format
#3.)
#a.) param() stores the data
# You should add your input parameters (windowsize and correlation lag) opening opening() function
#b.) korrel() calculate only 1 correlation
#c.)select.param() select one of the possible window size and correlation lag by adding the indexes
# you can rewrite the possibilities in param() function
#Window Size
#view the possibilities
param()[["WindowSize"]]
#choose the index
i1 <-1
#Correlation Lag
#view the possibilities
param()[["CorrelLag"]]
#choose the index
i2 <-1
#d.) all_correlations() output is an xts format table (rows=Date, cols=correlation pairs)
# head(all_correlations())
# 4.) Plot cross-correlations
#making an interactive plot by using "dygraphs" package
source("dyplot.R")
dyplot(all_correlations())
# setwd("C:/Users/banna/Documents/egyetem/EFRP/R/efrp_r_reizinger-master/efrp_r_reizinger-master")
setwd("C:/Users/Reizinger Kristóf/Desktop/HF/Final")
#0.) Loading functions
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlations.R")
source("select.param.R")
# data
# data
#1.)Set wd
dataset <- c("C:/Users/Reizinger Kristóf/Desktop/HF/Final/WTI2.xlsx")
#2.) Input for reading data
number_of_products <- 3 # 24 # number of analysed products
assertthat::validate_that(is.numeric(number_of_products)==T)
last_col_name <- Excel_colnames_find()[number_of_products + 1] # first col is Date
last_row_number <- 2558 # number of rows
read_range <- paste0("A1:",last_col_name,last_row_number) # converts inputs for Excel format
#3.)
#a.) param() stores the data
# You should add your input parameters (windowsize and correlation lag) opening opening() function
#b.) korrel() calculate only 1 correlation
#c.)select.param() select one of the possible window size and correlation lag by adding the indexes
# you can rewrite the possibilities in param() function
#Window Size
#view the possibilities
param()[["WindowSize"]]
#choose the index
i1 <-1
#Correlation Lag
#view the possibilities
param()[["CorrelLag"]]
#choose the index
i2 <-1
#making an interactive plot by using "dygraphs" package
source("dyplot.R")
dyplot(all_correlations())
